"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeDraftPrefix = removeDraftPrefix;
exports.useDocumentType = useDocumentType;

var _document = _interopRequireDefault(require("part:@sanity/base/datastore/document"));

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _react = require("react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function removeDraftPrefix(documentId) {
  var publishedId = (0, _draftUtils.getPublishedId)(documentId);

  if (publishedId !== documentId) {
    console.warn('Removed unexpected draft id in document link: All links to documents should have the ' + '`drafts.`-prefix removed and something appears to have made an intent link to `%s`', documentId);
  }

  return publishedId;
}

function useDocumentType(documentId, specifiedType) {
  var isResolved = isResolvedDocumentType(specifiedType);

  var _useState = (0, _react.useState)({
    isLoaded: isResolved,
    documentType: isResolved ? specifiedType : undefined
  }),
      _useState2 = _slicedToArray(_useState, 2),
      _useState2$ = _useState2[0],
      documentType = _useState2$.documentType,
      isLoaded = _useState2$.isLoaded,
      setDocumentType = _useState2[1];

  (0, _react.useEffect)(() => {
    if (isResolved) {
      return () => {// intentional noop
      };
    }

    var sub = _document.default.resolveTypeForDocument(documentId, specifiedType).subscribe(typeName => setDocumentType({
      documentType: typeName,
      isLoaded: true
    }));

    return () => sub.unsubscribe();
  }, [documentId, specifiedType, isResolved]);
  return {
    documentType,
    isLoaded
  };
}

function isResolvedDocumentType(specifiedType) {
  return Boolean(specifiedType && specifiedType !== '*');
}